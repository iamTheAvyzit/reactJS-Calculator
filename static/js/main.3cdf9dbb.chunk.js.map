{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTION","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DEL_DIGIT","EVALUATE","INT_FORMATTER","Intl","NumberFormat","maximumFractionDigits","reducer","state","overwrite","currOperand","includes","prevOperand","evaluate","length","slice","prev","parseFloat","curr","isNaN","evaluated","toString","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cdf9dbb.chunk.js","sourcesContent":["import { ACTION } from \"./App\"\r\n\r\nexport default function DigitButton({dispatch, digit}) {\r\n    return <button onClick={() => dispatch({type: ACTION.ADD_DIGIT, payload: {digit}})}>{digit}</button>\r\n}","import { ACTION } from \"./App\"\r\n\r\nexport default function OperationButton({dispatch, operation}) {\r\n    return <button onClick={() => dispatch({type: ACTION.CHOOSE_OPERATION, payload: {operation}})}>{operation}</button>\r\n}","import { useReducer } from 'react';\nimport './App.css';\nimport DigitButton from './DigitButton';\nimport OperationButton from './OperationButton';\n\nexport const ACTION = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DEL_DIGIT: 'del-digit',\n  EVALUATE: 'evaluate'\n}\n\nconst INT_FORMATTER = new Intl.NumberFormat(\"en-us\", {                                              // formatting the input and output in International US format (commas seperated: 1, 000, 00)\n  maximumFractionDigits: 0\n})\n\nfunction reducer(state, {type, payload}) {                                                          // destructuring action as type & payload\n  switch(type) {                                                                                    // type is an action, dispatched by <DigitButton> or <OperationButton>\n    case ACTION.ADD_DIGIT:\n      if(state.overwrite) {                                                                         // everytime the result is evaluated, if the user clicks any digit, the currOperand is set to that particular digit\n        return {\n          ...state,\n          currOperand: payload.digit,\n          overwrite:false                                                                           // overwrite is the flag which is set true whenever ACTION.EVALUATE is dispatched\n        }\n      }\n      if(payload.digit === \"0\" && state.currOperand === \"0\") {return state}                         // if user clicks \"0\" multiple times, it will render only once if the currOperand is 0\n      if(payload.digit === \".\" && state.currOperand.includes(\".\")) {return state}                   // at all times, there will be only one decimal point \".\" in the string\n      \n      return {\n        ...state,\n        currOperand: `${state.currOperand || \"\"}${payload.digit}`                                   // once all the conditions are checked, we set currOperand to the digit that user enters or leave it blank if nothing is entered\n      }\n    \n    case ACTION.CHOOSE_OPERATION:\n      if(state.currOperand == null && state.prevOperand == null) {return state}                     //if nothing is typed out we don't want anything to happen, just return the same state\n\n      if(state.currOperand == null) {                                                               // this lets user change the operator symbol, if pressed \"*\" and again pressed \"+\" our prevOperand will set to \"+\"\n        return {\n          ...state,\n          operation: payload.operation\n        }\n      }\n\n      if(state.prevOperand == null) {                                                               // if prevOperand is null\n        return {\n          ...state,                                                                                 // spread out state variables \n          operation: payload.operation,\n          prevOperand: state.currOperand,                                                           // and change prevOperand to currOperand\n          currOperand: null                                                                         // and set currOperand to null so that user can enter the second operand\n        }\n      }\n\n      return {                                                                                      // what if user clicks \"2\" + \"2\" and again \"+\" then it will evaluate(2+2 = 4) and render \"4+\"\" in the prevOperand\n        ...state,\n        prevOperand: evaluate(state),                                                               // set the return value of evaluate() prevOperand\n        operation: payload.operation,                                                               // add operation button\n        currOperand: null                                                                           // and set currOperand to null and let user add new value\n      }\n    \n    case ACTION.CLEAR:\n      return {}\n    \n    case ACTION.DEL_DIGIT:\n      if (state.overwrite) {                                                                        // this also checks for the evaluted overwrite thing same as above and will set everything to null\n        return {\n          ...state,\n          overwrite: false,\n          currOperand: null\n        }\n      }\n      if (state.currOperand == null) return state                                                   // if our currOperand is already null, then don't delete anything or do nothing\n      if (state.currOperand.length === 1) {                                                         // if currOperand is a single digit then update the state by setting currOperand to null\n        return { ...state, currOperand: null }\n      }\n      return {\n        ...state,\n        currOperand: state.currOperand.slice(0, -1)                                                 // else remove the last digit from the currOperand\n      }\n    \n    case ACTION.EVALUATE:\n      if(state.operation == null || state.currOperand == null || state.prevOperand == null ) return state         // check all operands are present\n      return {\n        ...state,\n        overwrite: true,\n        operation: null,\n        prevOperand: null,\n        currOperand: evaluate(state)\n      }\n  }\n}\n\nfunction evaluate({currOperand, prevOperand, operation}) {\n  const prev = parseFloat(prevOperand)                                                              // convert string to float\n  const curr = parseFloat(currOperand)\n  if(isNaN(prev)||isNaN(curr)) return \"\"                                                            // if any of the operands is NaN, then do nothing\n  let evaluated=\"\"\n  switch(operation) {\n    case \"+\": evaluated= prev + curr; break;\n    case \"â€“\": evaluated= prev - curr; break;\n    case \"âœ•\": evaluated= prev * curr; break;\n    case \"Ã·\": evaluated= prev / curr; break;\n  }\n  return evaluated.toString()                                                                       // send the result back to reducer\n}\n\nfunction formatOperand(operand) {\n  if(operand == null) return                                                                        // don't format anything if the string is empty\n  const [integer, decimal] = operand.split('.')                                                     // we don't want to format the digits after decimal, so split the whole string in two parts by \".\" it will give \"integer\" and everything after \".\" in the \"decimal\"\n  if(decimal == null) return INT_FORMATTER.format(integer)\n  return `${INT_FORMATTER.format(integer)}.${decimal}`                                              // call in-built format() to format the integer part and concatenate the decimal part to the result\n}\n\nfunction App() {\n  const [{currOperand, prevOperand, operation}, dispatch] = useReducer(reducer, {})                             // here we are managing 3 states and dispatc\n  return (\n    <div className=\"calc-grid\">\n      <div className=\"output\">\n        <div className=\"prev-operand\">{formatOperand(prevOperand)} {operation}</div>\n        <div className=\"curr-operand\">{formatOperand(currOperand)}</div>\n      </div>\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTION.CLEAR})}>AC</button>\n      <button onClick={() => dispatch({type: ACTION.DEL_DIGIT})}>DEL</button>\n      <OperationButton operation=\"Ã·\" dispatch={dispatch}/>\n      <DigitButton digit=\"7\" dispatch={dispatch}/>\n      <DigitButton digit=\"8\" dispatch={dispatch}/>\n      <DigitButton digit=\"9\" dispatch={dispatch}/>\n      <OperationButton operation=\"âœ•\" dispatch={dispatch}/>\n      <DigitButton digit=\"6\" dispatch={dispatch}/>\n      <DigitButton digit=\"5\" dispatch={dispatch}/>\n      <DigitButton digit=\"4\" dispatch={dispatch}/>\n      <OperationButton operation=\"â€“\" dispatch={dispatch}/>\n      <DigitButton digit=\"3\" dispatch={dispatch}/>\n      <DigitButton digit=\"2\" dispatch={dispatch}/>\n      <DigitButton digit=\"1\" dispatch={dispatch}/>\n      <OperationButton operation=\"+\" dispatch={dispatch}/>\n      <DigitButton digit=\".\" dispatch={dispatch}/>\n      <DigitButton digit=\"0\" dispatch={dispatch}/>\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTION.EVALUATE})}>=</button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}